version: "3.8"

services:
  frontend_client:
    hostname: frontend_client
    container_name: frontend_client
    build:
      context: ./client
      dockerfile: dockerfile.prod
    restart: on-failure
    depends_on:
      - graphql_api
    expose:
      - 80
    #volumes:
    # - $HOME/app_data/certs:certs
    #    ports:
    #     - 3000:3000
    environment:
      VIRTUAL_HOST: ${VIRTUAL_HOST}
      LETSENCRYPT_HOST: ${LETSENCRYPT_HOST}
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}
  graphql_api:
    hostname: graphql_api
    # container_name: graphql_api
    build:
      context: ./server
      dockerfile: dockerfile.prod
    depends_on:
      - mongo-setup_uniuyo
    ports:
      - "8000-8001:8000"
    environment:
      Replica_Set_One: ${Replica_Set_One}
      Replica_Set_Two: ${Replica_Set_Two}
      Replica_Set_Three: ${Replica_Set_Three}
      DB_HOST: ${DB_HOST} ## same as the database service name
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_DATABASE: ${DB_DATABASE}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_URL: ${REDIS_URL}
      NODE_ENV: production
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      SMS_API: ${SMS_API}
      SMS_Token: ${SMS_Token}
      REMITA_PUBLIC_KEY: ${REMITA_PUBLIC_KEY}
      REMITA_SECRET_KEY: ${REMITA_SECRET_KEY}
      MerchantId: ${MerchantId}
      Api_Key: ${Api_Key}
      ServiceTypeId: ${ServiceTypeId}
      Gateway: ${Gateway}
      CheckStatusUrl: ${CheckStatusUrl}
      ReturnRemitaUrl: ${ReturnRemitaUrl}
      RRRGateWayPaymentUrl: ${RRRGateWayPaymentUrl}
      JusibePublicKey: ${JusibePublicKey}
      JusibeAccessToken: ${JusibeAccessToken}
      EBulkSMSAPIKey: ${EBulkSMSAPIKey}
      EBulkSMSUsername: ${EBulkSMSUsername}
      EBulkSMSGateWay: ${EBulkSMSGateWay}
      CheapGlobalSmsGateway: ${CheapGlobalSmsGateway}
      CheapGlobalSmsSubAccount: ${CheapGlobalSmsSubAccount}
      CheapGlobalSmsSubAccountPassword: ${CheapGlobalSmsSubAccountPassword}
      DeveloperBugsEmailSupport: ${DeveloperBugsEmailSupport}
      DeveloperBugsEmailPassword: ${DeveloperBugsEmailPassword}
  mongo-setup_uniuyo:
    container_name: mongo-setup_uniuyo
    image: mongo
    restart: on-failure
    volumes:
      - ./scripts:/scripts
    entrypoint: ["/scripts/setup.sh"] # Make sure this file exists (see below for the setup.sh)
    depends_on:
      - mongo_DB1
      - mongo_DB2
      - mongo_DB3

  mongo_DB1:
    hostname: mongo_DB1
    container_name: mongo_DB1
    image: mongo
    expose:
      - 27456
    ports:
      - 27456:27017
    restart: always
    entrypoint: [
        "/usr/bin/mongod",
        #  "--keyFile",
        # "/data/file.key",
        "--bind_ip_all",
        "--replSet",
        "rs0",
        "--journal",
        "--dbpath",
        "/data/db",
        "--enableMajorityReadConcern",
        "false",
      ]
    volumes:
      - $HOME/app_data/uniuyo_hostel/data1/db:/data/db # This is where your volume will persist. e.g. VOLUME-DIR = ./volumes/mongodb
      - $HOME/app_data/uniuyo_hostel/data1/configdb:/data/configdb
      #- $HOME/keys:/data/file.key
      - ./scripts/createAdmin.sh:/scripts/createAdmin.sh
  mongo_DB2:
    hostname: mongo_DB2
    container_name: mongo_DB2
    image: mongo
    expose:
      - 28765
    ports:
      - 28765:27017
    restart: always
    entrypoint: [
        "/usr/bin/mongod",
        # "--keyFile",
        #"/data/file.key",
        "--bind_ip_all",
        "--replSet",
        "rs0",
        "--journal",
        "--dbpath",
        "/data/db",
        "--enableMajorityReadConcern",
        "false",
      ]
    volumes:
      - $HOME/app_data/uniuyo_hostel/data2/db:/data/db # This is where your volume will persist. e.g. VOLUME-DIR = ./volumes/mongodb
      - $HOME/app_data/uniuyo_hostel/data2/configdb:/data/configdb
      #- $HOME/keys:/data/file.key

  mongo_DB3:
    hostname: mongo_DB3
    container_name: mongo_DB3
    image: mongo
    # networks:
    #  - webproxy
    ports:
      - 24565:27017
    restart: always
    entrypoint: [
        "/usr/bin/mongod",
        #"--keyFile",
        #"/data/file.key",
        "--bind_ip_all",
        "--replSet",
        "rs0",
        "--journal",
        "--dbpath",
        "/data/db",
        "--enableMajorityReadConcern",
        "false",
      ]
    volumes:
      - $HOME/app_data/uniuyo_hostel/data3/db:/data/db # This is where your volume will persist. e.g. VOLUME-DIR = ./volumes/mongodb
      - $HOME/app_data/uniuyo_hostel/data3/configdb:/data/configdb
      # - $HOME/keys:/data/file.key

  mongo-express:
    image: mongo-express
    container_name: mongo-express_uniuyo
    restart: always
    ports:
      - 9081:8081
    depends_on:
      - mongo_DB1
    environment:
      ME_CONFIG_MONGODB_SERVER: ${ME_CONFIG_MONGODB_SERVER}
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${ME_CONFIG_MONGODB_ADMINUSERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${ME_CONFIG_MONGODB_ADMINPASSWORD}
      ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD}

  redis:
    image: redis
    container_name: redis_cache
    restart: always
    #networks:
    # - webproxy
    command: bash -c "redis-server --appendonly yes"
    ports:
      - 6890:6379
    volumes:
      - $HOME/app_data/uniuyo_hostel/redis/redis-data:/data
        # - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf

networks:
  default:
    external:
      name: nginx-proxy
